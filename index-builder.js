/**
 * This script expects the following global variables to be defined (received from 'extract_sessions.php'):
 *     - timeSlots: An array of strings representing the time slots available for booking. (ex: ['14:00', '14:30', '15:00', ...])
 *                  These elements were generated by the function 'make_laps' from 'utils.php'.
 *                  If a time slot is not in this list, it cannot be booked.
 *     - sessionsData: A dictionary where the key is the session ID (date of the session "yyyy-mm-dd") and the value is a dictionary containing the following keys:
 *        + day: The day of the session. (int in [1, 31])
 *        + month: The month of the session. (int in [1, 12])
 *        + year: The year of the session. (int of length 4)
 *        + location: The location of the session. (str)
 *        + n_engineers: The number of engineers that can be booked for the session. (int)
 *    - appointments: A dictionary where the key is the session ID (date of the session "yyyy-mm-dd") and the value is a list of integers representing the number of engineers booked for each time slot.
 *                    The length of this array is always equal to the length of 'timeSlots'.
 */

/// Used to convert month index to string before displaying the session details.
const _MONTHS_LIST = [
    '---',
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
];

/// Color used as background color for errors in the form.
const _ERROR_COLOR = "#ffc7c7";

document.addEventListener("DOMContentLoaded", main);

function main() {
    const phpDataElement = document.getElementById("php_sessions_data");
    if (phpDataElement === null) {
        console.error("No session data found.");
        return;
    }

    let ts, sd, a;
    try {
        const phpData = JSON.parse(phpDataElement.textContent);
        ts = phpData.timeSlots;
        sd = phpData.sessionsData;
        a  = phpData.appointments;
    } catch (error) {
        console.error("Failed to convert to JSON what was fetched:", error);
        return;
    }
    const timeSlots    = ts;
    const sessionsData = sd;
    const appointments = a;
    delete phpDataElement, ts, sd, a;

    unpack_sessions(sessionsData, appointments, timeSlots);
    init_active_session();
}


// ---------------------------------------------------------------------

/**
 * Updates the dropdown list of the form with the number of attendees for each time slot.
 * The number is preprocessed in PHP and passed to the client as a dictionary.
 * 
 * Arguments:
 *   - appointments (dict): The dictionary containing the number of attendees for each time slot.
 *   - timeSlots (list): The list of time slots available for booking.
 *   - sessionID (str): The date of the session, which is the primary key in the DB.
 *   - n_engineers (int): The number of engineers that can be booked for the session.
 */
function update_n_attendees(appointments, timeSlots, sessionID, n_engineers) {
    let dropdown = document.getElementById('appointmentTime');
    dropdown.options.length = 0;
    for (let i = 0 ; i < timeSlots.length ; i++) {
        let new_option = document.createElement('option');
        let n_rdv = appointments[sessionID][i];
        let prs_ppl = n_rdv > 1 ? "people" : "person";
        new_option.text = timeSlots[i] + " - (already " + n_rdv + " " + prs_ppl + " for " + n_engineers + " engineers)";
        new_option.value = timeSlots[i];
        dropdown.add(new_option);
    }
}

/**
 * Takes all the data representing a session in the database and creates a block ready to be displayed.
 * Also adds an event listener to react when the block is clicked (== the user chooses this session).
 * This listener updates the details (below the list) and the available time slots.
 * 
 * Arguments:
 *   - root (DOM element): The element in which the session block will be added.
 *   - day (int): The day of the session.
 *   - month (int): The month of the session.
 *   - year (int): The year of the session.
 *   - location (str): The location of the session.
 *   - n_engineers (int): The number of engineers that can be booked for the session.
 *   - sessionID (str): The date of the session, which is the primary key in the DB.
 *   - appointments (dict): The dictionary containing the number of attendees for each time slot.
 *   - timeSlots (list): The list of time slots available for booking.
 */
function add_session(root, day, month, year, location, n_engineers, sessionID, appointments, timeSlots) {
    // Padded day in [01, 31] of the session.
    let str_day = day.toString().padStart(2, '0');
    let date_txt = document.createElement("span");
    date_txt.className = "date_text";
    date_txt.innerHTML = str_day;

    let day_block = document.createElement("div");
    day_block.className = "session_date";
    day_block.appendChild(date_txt);
    
    // Three first letters of the month of the session.
    let str_mth   = _MONTHS_LIST[month].substring(0, 3) + ".";
    let month_txt = document.createElement("span");
    month_txt.className = "month_text";
    month_txt.innerHTML = str_mth;

    let month_block = document.createElement("div");
    month_block.className = "session_month";
    month_block.appendChild(month_txt);

    // Adding the components into the session's block.
    let session = document.createElement("div");
    session.className = "session_block";
    session.appendChild(month_block);
    session.appendChild(day_block);

    // Adding the event listener to the session block.
    session.addEventListener('click', (event) => {
        let blocks = document.getElementsByClassName('session_block');
        let details_date = document.getElementById('session_date');
        let details_loc = document.getElementById('session_location');
        let sID_block = document.getElementById('sessionID');
        // Reset all blocks and set the clicked one as active.
        for (let i = 0 ; i < blocks.length ; i++) {
            blocks[i].className = 'session_block';
        }
        event.currentTarget.className = 'session_block active_session';
        // Update details
        let litteral_date = str_day + " " + _MONTHS_LIST[month] + " " + year.toString();
        details_date.innerHTML = litteral_date;
        details_loc.innerHTML = location;
        // Update the form
        sID_block.value = sessionID;
        update_n_attendees(appointments, timeSlots, sessionID, n_engineers);
    });

    root.appendChild(session);
}


/**
 * Unpacks the data representing the sessions from the database and creates the blocks for them.
 * 
 * Arguments:
 *   - data (dict): The dictionary containing the data for each session.
 *   - appointments (dict): The dictionary containing the number of attendees for each time slot.
 *   - timeSlots (list): The list of time slots available for booking.
 */
function unpack_sessions(data, appointments, timeSlots) {
    let root = document.getElementById('sessions');
    if (root === null) {
        console.log("The sessions' root block couldn't be found in the DOM.");
        return;
    }
    
    for (const [session_id, info] of Object.entries(data)) {
        let day   = info['day'];
        let month = info['month'];
        let year  = info['year'];

        add_session(
            root, 
            day,
            month,
            year,
            info['location'],
            info['n_engineers'],
            session_id,
            appointments,
            timeSlots
        );
    }
}

/**
 * Initializes the active session block at the loading of the page.
 * By convention, the upcoming session is chosen.
 * A click event is simulated on the session block to make it active.
 * Sessions at anterior dates are not fetched by the SQL request.
 */
function init_active_session() {
    // Each of these blocks represents a session.
    let blocks = document.getElementsByClassName('session_block');
    if (blocks.length === 0) {
        console.log("No session blocks found.");
        return;
    }
    blocks[0].click();
}

/**
 * Removes the script blocks at the end of 'index.php'.
 * 
 * Arguments:
 *   - targets (list): The list of IDs of the script blocks to remove.
 */
function remove_scripts(targets) {
    targets.forEach((target) => {
        let script = document.getElementById(target);
        if (script === null) { return; }
        script.parentNode.removeChild(script);
    });
}
